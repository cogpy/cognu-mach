#!/bin/bash
#
# security-vulnerability-scanner.sh - Advanced vulnerability detection for GNU Mach
#
# Comprehensive security vulnerability scanner that detects common security
# issues in the GNU Mach microkernel codebase using static analysis techniques.
#

# Set script directory and project root
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="${PROJECT_ROOT:-$(dirname "$SCRIPT_DIR")}"
OUTPUT_DIR="${OUTPUT_DIR:-./security-analysis-results}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Vulnerability severity levels
CRITICAL=0
HIGH=0
MEDIUM=0
LOW=0

usage() {
    cat << EOF
Usage: $0 [OPTIONS]

Advanced vulnerability detection scanner for GNU Mach microkernel.

OPTIONS:
    -h, --help              Show this help message
    -o, --output DIR        Output directory for reports (default: ./security-analysis-results)
    -v, --verbose           Verbose output
    --report-only           Generate report only, skip scanning

EOF
}

# Parse command line arguments
VERBOSE=false
REPORT_ONLY=false

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            usage
            exit 0
            ;;
        -o|--output)
            OUTPUT_DIR="$2"
            shift 2
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        --report-only)
            REPORT_ONLY=true
            shift
            ;;
        *)
            echo "Unknown option: $1" >&2
            usage >&2
            exit 1
            ;;
    esac
done

cd "$PROJECT_ROOT"

# Create output directory
mkdir -p "$OUTPUT_DIR"

echo -e "${BLUE}=== GNU Mach Security Vulnerability Scanner ===${NC}"
echo "Project: $PROJECT_ROOT"
echo "Output:  $OUTPUT_DIR"
echo

# Function to log vulnerability
log_vulnerability() {
    local severity=$1
    local category=$2
    local file=$3
    local line=$4
    local description=$5
    
    case $severity in
        CRITICAL) CRITICAL=$((CRITICAL + 1)) ;;
        HIGH) HIGH=$((HIGH + 1)) ;;
        MEDIUM) MEDIUM=$((MEDIUM + 1)) ;;
        LOW) LOW=$((LOW + 1)) ;;
    esac
    
    echo "$severity,$category,$file,$line,\"$description\"" >> "$OUTPUT_DIR/vulnerabilities.csv"
    
    if [[ "$VERBOSE" == "true" ]] || [[ "$severity" == "CRITICAL" ]]; then
        echo -e "${RED}[$severity] $category${NC}: $file:$line - $description"
    fi
}

# Initialize vulnerability report
if [[ "$REPORT_ONLY" != "true" ]]; then
    echo "Severity,Category,File,Line,Description" > "$OUTPUT_DIR/vulnerabilities.csv"
    
    # Scan for buffer overflow vulnerabilities
    echo -e "${YELLOW}Scanning for buffer overflow vulnerabilities...${NC}"
    
    # Dangerous string functions
    while IFS= read -r line; do
        file=$(echo "$line" | cut -d: -f1)
        line_num=$(echo "$line" | cut -d: -f2)
        content=$(echo "$line" | cut -d: -f3-)
        
        if echo "$content" | grep -q "strcpy\|strcat\|sprintf\|gets"; then
            log_vulnerability "HIGH" "Buffer Overflow" "$file" "$line_num" "Use of dangerous string function: $content"
        fi
    done < <(grep -rn -E "(strcpy|strcat|sprintf|gets)\\s*\\(" --include="*.c" .)
    
    # Unchecked array access
    while IFS= read -r line; do
        file=$(echo "$line" | cut -d: -f1)
        line_num=$(echo "$line" | cut -d: -f2)
        content=$(echo "$line" | cut -d: -f3-)
        
        if ! echo "$content" | grep -q "if\|MACH_BOUNDS_CHECK\|MACH_RANGE_CHECK"; then
            log_vulnerability "MEDIUM" "Array Bounds" "$file" "$line_num" "Potential unchecked array access: $content"
        fi
    done < <(grep -rn -E "\\[[^\\]]+\\]\\s*=" --include="*.c" . | head -20)
    
    # Integer overflow vulnerabilities
    echo -e "${YELLOW}Scanning for integer overflow vulnerabilities...${NC}"
    
    while IFS= read -r line; do
        file=$(echo "$line" | cut -d: -f1)
        line_num=$(echo "$line" | cut -d: -f2)
        content=$(echo "$line" | cut -d: -f3-)
        
        if ! echo "$content" | grep -q "MACH_SAFE_ADD\|MACH_SAFE_MUL\|MACH_SAFE_.*_CHECK"; then
            log_vulnerability "MEDIUM" "Integer Overflow" "$file" "$line_num" "Potential integer overflow in arithmetic: $content"
        fi
    done < <(grep -rn -E "\\*.*\\+|\\+.*\\*" --include="*.c" . | head -15)
    
    # Memory management issues
    echo -e "${YELLOW}Scanning for memory management issues...${NC}"
    
    # Unchecked malloc/kalloc
    while IFS= read -r line; do
        file=$(echo "$line" | cut -d: -f1)
        line_num=$(echo "$line" | cut -d: -f2)
        content=$(echo "$line" | cut -d: -f3-)
        
        # Look for malloc/kalloc without immediate NULL check
        if ! grep -A 3 "$line_num" "$file" | grep -q "if.*NULL\|!.*ptr"; then
            log_vulnerability "MEDIUM" "Memory Management" "$file" "$line_num" "Unchecked memory allocation: $content"
        fi
    done < <(grep -rn -E "(malloc|kalloc|kmem_alloc)\\s*\\(" --include="*.c" . | head -10)
    
    # Use after free patterns
    while IFS= read -r line; do
        file=$(echo "$line" | cut -d: -f1)
        line_num=$(echo "$line" | cut -d: -f2)
        content=$(echo "$line" | cut -d: -f3-)
        
        log_vulnerability "HIGH" "Use After Free" "$file" "$line_num" "Potential use after free: $content"
    done < <(grep -rn -E "free\\s*\\([^)]+\\);.*[^/]*\\1" --include="*.c" . | head -5)
    
    # Format string vulnerabilities
    echo -e "${YELLOW}Scanning for format string vulnerabilities...${NC}"
    
    while IFS= read -r line; do
        file=$(echo "$line" | cut -d: -f1)
        line_num=$(echo "$line" | cut -d: -f2)
        content=$(echo "$line" | cut -d: -f3-)
        
        # printf with user-controlled format string
        if echo "$content" | grep -E "printf\\s*\\([^\"]*[a-zA-Z_][a-zA-Z0-9_]*[^\"]*\\)"; then
            log_vulnerability "HIGH" "Format String" "$file" "$line_num" "Potential format string vulnerability: $content"
        fi
    done < <(grep -rn -E "printf\\s*\\(" --include="*.c" . | head -10)
    
    # Race condition patterns
    echo -e "${YELLOW}Scanning for race condition vulnerabilities...${NC}"
    
    while IFS= read -r line; do
        file=$(echo "$line" | cut -d: -f1)
        line_num=$(echo "$line" | cut -d: -f2)
        content=$(echo "$line" | cut -d: -f3-)
        
        # Global variable access without locking
        if ! echo "$content" | grep -q "lock\|mutex\|atomic"; then
            log_vulnerability "MEDIUM" "Race Condition" "$file" "$line_num" "Potential race condition on global variable: $content"
        fi
    done < <(grep -rn -E "^[^/]*[a-zA-Z_][a-zA-Z0-9_]*\\s*=" --include="*.c" . | head -5)
    
    # Privilege escalation patterns
    echo -e "${YELLOW}Scanning for privilege escalation vulnerabilities...${NC}"
    
    while IFS= read -r line; do
        file=$(echo "$line" | cut -d: -f1)
        line_num=$(echo "$line" | cut -d: -f2)
        content=$(echo "$line" | cut -d: -f3-)
        
        log_vulnerability "CRITICAL" "Privilege Escalation" "$file" "$line_num" "Potential privilege escalation: $content"
    done < <(grep -rn -E "(setuid|seteuid|setgid|setegid)" --include="*.c" . | head -3)
    
    # Cryptographic weaknesses
    echo -e "${YELLOW}Scanning for cryptographic weaknesses...${NC}"
    
    while IFS= read -r line; do
        file=$(echo "$line" | cut -d: -f1)
        line_num=$(echo "$line" | cut -d: -f2)
        content=$(echo "$line" | cut -d: -f3-)
        
        if echo "$content" | grep -E "MD5|SHA1|DES|RC4"; then
            log_vulnerability "MEDIUM" "Weak Crypto" "$file" "$line_num" "Use of weak cryptographic algorithm: $content"
        fi
    done < <(grep -rn -E "(MD5|SHA1|DES|RC4)" --include="*.c" . | head -5)
fi

# Generate vulnerability report
cat > "$OUTPUT_DIR/vulnerability-report.txt" << EOF
=== GNU Mach Security Vulnerability Report ===
Generated: $(date)

Summary:
  Critical: $CRITICAL
  High:     $HIGH
  Medium:   $MEDIUM
  Low:      $LOW
  Total:    $((CRITICAL + HIGH + MEDIUM + LOW))

Risk Assessment:
$(if [[ $CRITICAL -gt 0 ]]; then
    echo "  [CRITICAL] Immediate attention required - $CRITICAL critical vulnerabilities found"
elif [[ $HIGH -gt 5 ]]; then
    echo "  [HIGH] High risk - $HIGH high-severity vulnerabilities found"
elif [[ $HIGH -gt 0 || $MEDIUM -gt 10 ]]; then
    echo "  [MEDIUM] Moderate risk - Review and fix recommended"
else
    echo "  [LOW] Low risk - No critical issues found"
fi)

Recommendations:
1. Address all CRITICAL vulnerabilities immediately
2. Review HIGH severity vulnerabilities within 30 days
3. Consider implementing additional security controls:
   - Enhanced buffer overflow protection
   - Improved input validation
   - Stronger memory safety checks
   - Better error handling

Detailed vulnerability list available in: $OUTPUT_DIR/vulnerabilities.csv

Security Improvements Detected:
$(if [ -f "include/mach/mach_security.h" ]; then
    echo "  ✓ Advanced security framework present"
else
    echo "  ✗ No advanced security framework detected"
fi)
$(if [ -f "kern/security_monitor.c" ]; then
    echo "  ✓ Runtime security monitoring implemented"
else
    echo "  ✗ No runtime security monitoring"
fi)
$(if [ -f "kern/cfi_integrity.c" ]; then
    echo "  ✓ Control Flow Integrity checks implemented"
else
    echo "  ✗ No CFI protection detected"
fi)
$(if grep -q "MACH_SAFE_" include/mach/mach_safety.h 2>/dev/null; then
    echo "  ✓ Safe arithmetic macros available"
else
    echo "  ✗ No safe arithmetic macros detected"
fi)

EOF

echo -e "${GREEN}=== Vulnerability scan complete ===${NC}"
echo "Summary: $CRITICAL critical, $HIGH high, $MEDIUM medium, $LOW low severity issues"
echo "Report saved to: $OUTPUT_DIR/vulnerability-report.txt"
echo "Detailed CSV: $OUTPUT_DIR/vulnerabilities.csv"

# Return appropriate exit code
if [[ $CRITICAL -gt 0 ]]; then
    exit 2  # Critical vulnerabilities found
elif [[ $HIGH -gt 0 ]]; then
    exit 1  # High severity vulnerabilities found
else
    exit 0  # No critical issues
fi